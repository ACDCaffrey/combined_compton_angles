data <- filter(data,
abs(ACe - DCe) < 4) %>% data.table # no more than a 4 keV difference
head(data)
temp <- data[, .N, .(T50AC, T30AC)]
head(temp)
dim(temp)
ggplot(temp, aes(x = T50AC, y = T30AC)) +
stat_smooth() + geom_point(aes(size = N)) +
theme_classic()
ggplot(temp, aes(x = T50AC, y = T30AC)) +
geom_point(aes(size = N)) +
theme_classic()
ggplot(temp, aes(x = T50AC, y = T30AC)) +
geom_point(aes(alpha = N)) +
theme_classic()
temp <- data[, .N, .(T50AC - T30AC)]
head(temp)
temp <- data[, .N, .(T50AC - T30AC, ACe)]
dim(temp)
head(temp)
ggplot(temp, aes(x = ACe, y = T50AC)) +
geom_point(aes(alpha = N)) +
theme_classic()
dim(temp)
ggplot(temp, aes(x = ACe, y = T50AC)) +
geom_point(aes(alpha = N, col = N)) +
theme_classic()
ggplot(temp, aes(x = ACe, y = T50AC)) +
geom_point(aes(col = N)) +
theme_classic()
ggplot(temp, aes(x = ACe, y = T50AC)) +
geom_point(aes(col = N, size = N)) +
theme_classic()
a <- filter(data, 1000)
a <- sample_n(data, 1000)
a
plot(data = a, T50AC - T30AC ~ ACe)
a <- sample_n(data, 10000)
plot(data = a, T50AC - T30AC ~ ACe)
ggplot(temp, aes(x = ACe, y = T50AC)) +
geom_point(aes(col = N, size = N)) +
theme_linedraw()
temp <- data[, .N, .(DCe, ACe)]
head(temp)
ggplot(temp, aes(x = ACe, y = DCe)) +
geom_point(aes(col = N, size = N)) +
theme_linedraw()
ggplot(temp, aes(x = ACe, y = DCe)) +
geom_point(aes(col = N, alpha = N)) +
theme_linedraw()
?data.table
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
?data.table
library(data.table)
?dat.table
?data.table
head(data)
head(data[, .(T50AC, ACe)])
head(data[, .(T50AC - T30AC, ACe)])
temp <- data[, .N, .(T30, ACe)]
temp <- data[, .N, .(T30, ACe)]
temp <- data[, .N, .(T30AC, ACe)]
head(temp)
temp <- data[, .N, .(T30AC, ACe, ACstrip)]
head(temp)
dim(temp)
ggplot(temp[ACstrip == 1], aes(x = ACe, y = T30AC)) +
geom_point() +
theme_linedraw()
library(ggplot2)
library(dplyr)
data <- fread("/Users/adamcaffrey/Documents/postdoc/scatter_Z_PSA/scatter_risetimes.txt")
colnames(data) <- c("T30AC", "T50AC", "T90AC",
"T30DC", "T50DC", "T90DC",
"ACstrip", "DCstrip",
"ACe", "DCe")
data <- filter(data,
abs(ACe - DCe) < 4) %>%
data.table # no more than a 4 keV difference
temp <- data[, .N, .(T30AC, ACe, ACstrip)]
ggplot(temp[ACstrip == 1], aes(x = ACe, y = T30AC)) +
geom_point() +
theme_linedraw()
ggplot(temp[ACstrip == 2], aes(x = ACe, y = T30AC)) +
geom_point() +
theme_linedraw()
ggplot(temp[ACstrip == 3], aes(x = ACe, y = T30AC)) +
geom_point() +
theme_linedraw()
?vars
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point() +
facet_grid(ACstrip)
temp <- data[, .N, .(T30AC, ACe, ACstrip)]
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point() +
facet_grid(ACstrip)
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point() +
facet_grid(ACstrip) +
theme_linedraw()
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point() +
facet_grid(vars(ACstrip)) +
theme_linedraw()
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point() +
facet_grid(vars(ACstrip)) +
theme_linedraw()
head(temp)
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point(aes(alpha = N)) +
facet_grid(vars(ACstrip)) +
theme_linedraw()
temp <- data[, .N, .(T90AC - T30AC, ACe, ACstrip)]
ggplot(temp, aes(x = ACe, y = T30AC)) +
geom_point(aes(alpha = N)) +
facet_grid(vars(ACstrip)) +
theme_linedraw()
head(temp)
temp <- data[, .N, .(T90AC - T30AC, ACe, ACstrip)]
colnames(temp) <- c("risetime", "energy", "strip", "count")
ggplot(temp, aes(x = energy, y = risetime)) +
geom_point(aes(alpha = count)) +
facet_grid(vars(strip)) +
theme_linedraw()
ggplot(temp, aes(x = energy, y = risetime)) +
geom_point(aes(alpha = count)) +
geom_smooth() +
facet_grid(vars(strip)) +
theme_linedraw()
temp <- data[, .N, .(T90DC - T30DC, DCe, ACstrip)]
colnames(temp) <- c("risetime", "energy", "strip", "count")
ggplot(temp, aes(x = energy, y = risetime)) +
geom_point(aes(alpha = count)) +
geom_smooth() +
facet_grid(vars(strip)) +
theme_linedraw()
temp <- data[, .N, .(T90DC, DCe, ACstrip)]
colnames(temp) <- c("risetime", "energy", "strip", "count")
ggplot(temp, aes(x = energy, y = risetime)) +
geom_point(aes(alpha = count)) +
geom_smooth() +
facet_grid(vars(strip)) +
theme_linedraw()
path <- "/Users/adamcaffrey/Documents/postdoc/kinect test/kinect/JAIMIE19/R18/"
file1 <- paste0(path, "KinectOut_ir.txt")
file2 <- paste0(path, "KinectOut_rgb.txt")
file3 <- paste0(path, "KinectOut_depth.txt")
data_ir <- fread(file1) %>% as.matrix() # infra red data
data_rgb <- fread(file2) # photo data
data_depth <- fread(file3) %>% as.matrix() # depth data
colnames(data_rgb) <- c("r", "g", "b")
a <- as.cimg(rep(1:(1920*1080),3),
x = 1920, y = 1080,
cc = 3)
a[,,,1] <- data_rgb$r
a[,,,2] <- data_rgb$g
a[,,,3] <- data_rgb$b
library(data.table)
library(magrittr)
library(imager)
path <- "/Users/adamcaffrey/Documents/postdoc/kinect test/kinect/JAIMIE19/R18/"
file1 <- paste0(path, "KinectOut_ir.txt")
file2 <- paste0(path, "KinectOut_rgb.txt")
file3 <- paste0(path, "KinectOut_depth.txt")
data_ir <- fread(file1) %>% as.matrix() # infra red data
data_rgb <- fread(file2) # photo data
data_depth <- fread(file3) %>% as.matrix() # depth data
colnames(data_rgb) <- c("r", "g", "b")
a <- as.cimg(rep(1:(1920*1080),3),
x = 1920, y = 1080,
cc = 3)
a[,,,1] <- data_rgb$r
a[,,,2] <- data_rgb$g
a[,,,3] <- data_rgb$b
plot(a)
plot(data_ir)
plot(data_depth)
data_depth
filled.contour(data_ir)
filled.contour(data_depth)
filled.contour(t(data_depth))
filled.contour(t(apply(data_depth, 1, rev)))
filled.contour(data_depth)
filled.contour(t(apply(data_depth, 2, rev)))
filled.contour(data_ir)
filled.contour(t(apply(data_ir, 2, rev)))
plot(a)
Sys.info()
sessionInfo()
sessionInfo()
?fft
?mrbsizeR::fftshift
?pracma::meshgrid
data <- data.table::fread("/Users/adamcaffrey/Desktop/recons/analytical_slice.txt")
data_m <- matrix(data$V1, nrow = 400, ncol = 400, byrow = T)
dim(data_m)
filled.contour(data_m)
fft_slice <- fft(global_slice)
fft_slice <- fft(data_m)
filled.contour(fft_slice)
class(fft_slice)
fft_slice[1,1:10]
?fft
filled.contour(abs(fft_slice))
fftshift_slice <- mrbsizeR::fftshift(fft_slice)
filled.contour(abs(fftshift_slice))
plot(fft_slice[200,])
plot(fft_slice[200,], type = 's')
plot(fft_slice[200,], type = 'l')
plot(abs(fft_slice[200,]), type = 's')
plot(abs(fftshift_slice[200,]), type = 's')
scale = 100/(log(1 + max(abs(fft_slice)))) # scaling coefficient (max = 100)
logmagA = scale*log(1 + abs(fftshift_slice)) # scaling
xdim <- ncol(global_slice); ydim <- nrow(global_slice) # dimensions
xdim <- ncol(data_m); ydim <- nrow(data_m) # dimensions
plane <- pracma::meshgrid(-floor(xdim/2):floor((xdim-1)/2), -floor(ydim/2):floor((ydim-1)/2))
dim(plane)
class(plane)
plane
length(plan)
length(plane)
plane[[1]]
plane[[2]]
dim(plane[[1]])
dim(plane[[2]])
filled.contour(plane[[1]])
filled.contour(plane[[2]])
filled.contour(plane[[1]] + plane [[2]])
plane$X
radius <- sqrt(plane$X^2 + plane$Y^2) # circle radius equation
radius
dim(radius)
filled.contour(radius)
pass <- radius*(radius > input$radius_cutoff)
pass <- radius*(radius > 14)
pass
filled.contour(pass)
pass <- radius*(radius > 100)
F1 <- fftshift_slice * pass # ideal low-pass filter
filled.contour(pass)
f1
F1
filled.contour(abs(F1))
filled.contour(abs(fftshift_slice))
filled.contour(abs(logmagA))
?ifftshift
?fft
Fi <- mrbsizeR::ifftshift(F1) # inverse transform to regular
filled.contour(Fi)
filled.contour(abs(Fi))
Fi2 <<- abs(fft(Fi, inverse = TRUE))
filled.contour(fft(Fi, inverse = TRUE))
filled.contour(abs(fft(Fi, inverse = TRUE)))
library(data.table)
?data.table
runif(1,10)
runif(1:10,10)
?rrunif
?runif
?Random
data <- data.table(x = sample(1:5, 100))
data <- data.table(x = sample(1:5, 100, replace = TRUE))
data
data <- data.table(e = sample(1:8, 1000, replace = TRUE),
f = sample(1:8, 1000, replace = TRUE),
g = sample(1:5, 1000, replace = TRUE),
h = sample(1:10, 1000, replace = TRUE))
head(data)
data[, .N, .(e,f,g,h)]
data[, .N, .(e,f,g,h)][order(N)]
data <- data.table(e = sample(1:5, 1000, replace = TRUE),
f = sample(1:5, 1000, replace = TRUE),
g = sample(1:5, 1000, replace = TRUE),
h = sample(1:5, 1000, replace = TRUE))
data[, .N, .(e,f,g,h)][order(N)]
names(data)
colnames(data)
head(data)
a <- c(1.2, 2, 3.5, 4)
b <- c(1.2, 2.2, 3.5, 4)
a == b
a <- c(1,2,3)
a[2] = "2"
a
?rnorm
?scipen
??scipen
?option
?remove
?delete
?data.frame
which(a == 2)
which(a > 2)
?rnorm
x = 1:100
objects()
y = x^2 + 21
y = jitter(y, 3)
y
plot(x,y)
y = jitter(y, 1000)
plot(x,y)
lm(y~x)
y = x*2 + 21
y = jitter(y, 100)
lm(y~x)
plot(lm(y~x), col = "blue")
plot(x,y)
abline(lm(y~x))
plot(lm(y~x), col = "blue")
setwd("~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5")
setwd("~/Documents/postdoc/master students data/owain - fuel/codes")
library(data.table) # how I read in the data, this is the fastest method
library(gtools) # for rearranging the file names by number and character
library(abind) # combine multiple 2d arrays to a 3d one
library(magrittr) # for the %>% symbol in the code
library(ggplot2) # plotting library
library(viridis) # 2D slice colouring
library(wvtool) # rotate matrix
library(matlab) # padding array
library(OpenImageR)
library(gridExtra)
source("./methods.R")
rotation_point <- 240
path_to_dataset <-  "~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5"
size_of_imagespace <- 600
files <- list.files(path = path_to_dataset, pattern = "slice_*")
ordered <- mixedsort(files)
list_of_data <- lapply(paste0(path_to_dataset, ordered), fread)
list_of_data_matrices <- lapply(list_of_data, to_matrix, size_of_imagespace)
data_3d_matrix <- abind(list_of_data_matrices, along = 3)
setwd("~/Documents/postdoc/master students data/owain - fuel/codes")
library(data.table) # how I read in the data, this is the fastest method
library(gtools) # for rearranging the file names by number and character
library(abind) # combine multiple 2d arrays to a 3d one
library(magrittr) # for the %>% symbol in the code
library(ggplot2) # plotting library
library(viridis) # 2D slice colouring
library(wvtool) # rotate matrix
library(matlab) # padding array
library(OpenImageR)
library(gridExtra)
source("./methods.R")
rotation_point <- 240
size_of_imagespace <- 600
path_to_dataset <-  "~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5"
files <- list.files(path = path_to_dataset, pattern = "slice_*")
ordered <- mixedsort(files)
ordered
list_of_data <- lapply(paste0(path_to_dataset, ordered), fread)
path_to_dataset <-  "~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5/"
files <- list.files(path = path_to_dataset, pattern = "slice_*")
ordered <- mixedsort(files)
ordered
list_of_data <- lapply(paste0(path_to_dataset, ordered), fread)
list_of_data_matrices <- lapply(list_of_data, to_matrix, size_of_imagespace)
data_3d_matrix <- abind(list_of_data_matrices, along = 3)
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)[1,2]
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)
max_row_slice
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
slice_1 <- data_3d_matrix[,max_row_slice,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
# max of Run5 (291, 258) 240 mm
# max of Run7 (292, 306) 180 mm
setwd("~/Documents/postdoc/master students data/owain - fuel/codes")
library(data.table) # how I read in the data, this is the fastest method
library(gtools) # for rearranging the file names by number and character
library(abind) # combine multiple 2d arrays to a 3d one
library(magrittr) # for the %>% symbol in the code
library(ggplot2) # plotting library
library(viridis) # 2D slice colouring
library(wvtool) # rotate matrix
library(matlab) # padding array
library(OpenImageR)
library(gridExtra)
source("./methods.R")
rotation_point <- 240
size_of_imagespace <- 600
path_to_dataset <-  "~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5/"
files <- list.files(path = path_to_dataset, pattern = "slice_*")
ordered <- mixedsort(files)
list_of_data <- lapply(paste0(path_to_dataset, ordered), fread)
list_of_data_matrices <- lapply(list_of_data, to_matrix, size_of_imagespace)
data_3d_matrix <- abind(list_of_data_matrices, along = 3)
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)
slice_1 <- data_3d_matrix[,max_row_slice,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)[1,1]
slice_1 <- data_3d_matrix[,max_row_slice,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
max(slice_1)
setwd("~/Documents/postdoc/master students data/owain - fuel/codes")
library(data.table) # how I read in the data, this is the fastest method
library(gtools) # for rearranging the file names by number and character
library(abind) # combine multiple 2d arrays to a 3d one
library(magrittr) # for the %>% symbol in the code
library(ggplot2) # plotting library
library(viridis) # 2D slice colouring
library(wvtool) # rotate matrix
library(matlab) # padding array
library(OpenImageR)
library(gridExtra)
source("./methods.R")
rotation_point <- 240
size_of_imagespace <- 600
path_to_dataset <-  "~/Documents/postdoc/master students data/owain - fuel/codes/test data/Run5/"
files <- list.files(path = path_to_dataset, pattern = "slice_*")
ordered <- mixedsort(files)
list_of_data <- lapply(paste0(path_to_dataset, ordered), fread)
list_of_data_matrices <- lapply(list_of_data, to_matrix, size_of_imagespace)
data_3d_matrix <- abind(list_of_data_matrices, along = 3)
# Run5 - tester
display_2d_slice(data_3d_matrix, distance = 240, yint = 291, xint = 258) # display a 2D slice if you know the distance
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)[1,1]
slice_1 <- data_3d_matrix[,max_row_slice,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
max(slice_1)
max(data_3d_matrix)
max_row_slice <- which(data_3d_matrix == max(data_3d_matrix), arr.ind = T)
max_row_slice
# display slice
display_zslice(slice_1, yint = 266, xint = 300) # Run5
slice_1 <- data_3d_matrix[,266,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
slice_1 <- data_3d_matrix[,295,] # slice 1 is Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 300) # Run5
# display slice
display_zslice(slice_1, yint = 240, xint = 258) # Run5
display_matrix <- function(m, plot_name){
slice_melted <- reshape2::melt(m) %>%
.[.$value != 0,]
ggplot(slice_melted, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill = value)) +
scale_fill_gradient(low = "white", high = "black") +
labs(x = "Pos X (mm)", y = "Pos Y (mm)", title = plot_name) +
theme_linedraw()
}
produce_slice <- function(data, n){
formatted_data <- data %>% unlist %>% matrix(ncol = n) %>% t
positions <- which(formatted_data != "aa", arr.ind = TRUE)
if(is.matrix(data) == TRUE){
three_col <- cbind(positions, "val" = as.numeric(data)) %>% data.frame(row.names = NULL)
}
else{three_col <- cbind(positions, "val" = unlist(data)) %>% data.frame(row.names = NULL)}
ggplot <- ggplot(three_col, aes(x = row, y = col)) +
geom_raster(aes(fill = val)) +
labs(x = "X (mm)", y = "Y (mm)", fill = "Number\nof Overlaps") +
theme(panel.background = element_rect(fill = "white", colour = "grey50"),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
plot.title = element_text(size = 11)) +
scale_x_continuous(limits = c(0,n), expand = c(0, 0)) +
scale_y_continuous(limits = c(0,n), expand = c(0, 0)) +
scale_fill_gradientn(colours = c("#151a25", "#006e90", "#f18f01", "white")) +
coord_fixed()
return(ggplot)
}
slice = fread("/Users/adamcafrey/Desktop/together.txt")
slice = fread("/Users/adamcaffrey/Desktop/together.txt")
dim(slice)
display_matrix(slice, "Iteration 0")
filled.contour(slice)
dim(slice)
class(slice)
slice = matrix(slice, nrow = 600, ncol = 401)
display_matrix(slice, "Iteration 0")
filled.contour(slice)
class(slice)
max(slice)
slice
slice = fread("/Users/adamcaffrey/Desktop/together.txt")
slice
a = as.matrix(slice)
a
filled.contour(a)
slice = a
display_matrix(slice, "Iteration 0")
fft_slice <- fft(slice) # fast discrete 2d fourier transform
#display_matrix(abs(fft_slice), "Fourier transform of Iteration 0")
produce_slice(abs(fft_slice), 400)
fftshift_slice <- mrbsizeR::fftshift(fft_slice) # shift low freq. components to centre
#display_matrix(abs(fftshift_slice), "Fourier transform of Iteration 0")
produce_slice(abs(fftshift_slice), 400)
c = 100/(log(1 + max(abs(fft_slice)))) # scaling coefficient (max = 100)
logmagA = c*log(1 + abs(fftshift_slice)) # scaling
#display_matrix(abs(logmagA), "Scaled Transform of Image")
produce_slice(abs(logmagA), 400)
xdim <- ncol(slice); ydim <- nrow(slice) # dimensions
plane <- pracma::meshgrid(-floor(xdim/2):floor((xdim-1)/2), -floor(ydim/2):floor((ydim-1)/2))
radius <- sqrt(plane$X^2 + plane$Y^2) # circle radius equation
display_matrix(radius, "Radius Before Cutoff")
produce_slice(radius, 400)
radius_cutoff <- 50 # 50 good for high pass
radius_high <- radius*(radius < radius_cutoff)
produce_slice(radius_high, 400)
F2 <- fftshift_slice * radius_high # ideal high-pass filter
# butterworth
order <- 1 # butterworth order parameter, controls blur gradient
